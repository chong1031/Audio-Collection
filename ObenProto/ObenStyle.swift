//
//  ObenStyle.swift
//  OBEN
//
//  Created by Will on 10/8/15.
//  Copyright (c) 2015 FFORM. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class ObenStyle : NSObject {

    //// Cache

    private struct Cache {
        static let obenBlue: UIColor = UIColor(red: 0.314, green: 0.631, blue: 1.000, alpha: 1.000)
        static let goldColor: UIColor = UIColor(red: 1.000, green: 0.857, blue: 0.000, alpha: 0.900)
        static var imageOfMic: UIImage?
        static var micTargets: [AnyObject]?
        static var imageOfMorph: UIImage?
        static var morphTargets: [AnyObject]?
        static var imageOfStar: UIImage?
        static var starTargets: [AnyObject]?
        static var imageOfDefaultProfile: UIImage?
        static var defaultProfileTargets: [AnyObject]?
        static var imageOfGoldCup: UIImage?
        static var goldCupTargets: [AnyObject]?
        static var imageOfBubbles: UIImage?
        static var bubblesTargets: [AnyObject]?
        static var imageOfTts: UIImage?
        static var ttsTargets: [AnyObject]?
        static var imageOfLeftArrow: UIImage?
        static var leftArrowTargets: [AnyObject]?
        static var imageOfPlay: UIImage?
        static var playTargets: [AnyObject]?
        static var imageOfGear: UIImage?
        static var gearTargets: [AnyObject]?
    }

    //// Colors

    public class var obenBlue: UIColor { return Cache.obenBlue }
    public class var goldColor: UIColor { return Cache.goldColor }

    //// Drawing Methods

    public class func drawRecording(active active: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let normal = UIColor(red: 0.210, green: 0.210, blue: 0.210, alpha: 1.000)
        let highlight = UIColor(red: 1.000, green: 0.160, blue: 0.141, alpha: 1.000)
        let color = UIColor(red: 0.867, green: 0.867, blue: 0.867, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.5), offset: CGSizeMake(0.1, 1.1), blurRadius: 5)
        let shadow2 = NSShadow(color: UIColor.whiteColor().colorWithAlphaComponent(0.35), offset: CGSizeMake(0.1, 2.1), blurRadius: 5)

        //// Variable Declarations
        let genColor = active ? highlight : normal
        let genShadowColor = active ? NSShadow(color: highlight, offset: CGSizeMake(0, 2), blurRadius: 5) : NSShadow(color: normal, offset: CGSizeMake(0, 2), blurRadius: 5)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(3, 3, 44, 44))
        color.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (shadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)



        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(14, 14, 22, 22))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, genShadowColor.shadowOffset, genShadowColor.shadowBlurRadius, (genShadowColor.shadowColor as! UIColor).CGColor)
        genColor.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow2.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (shadow2.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow2.shadowOffset, shadow2.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    public class func drawCanvas2() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(0, 0, 50, 50)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        ObenStyle.drawRecording(active: true)
        CGContextRestoreGState(context)
    }

    public class func drawMic() {

        //// microphone-F Drawing
        let microphoneFPath = UIBezierPath()
        microphoneFPath.moveToPoint(CGPointMake(16.35, 18.9))
        microphoneFPath.addCurveToPoint(CGPointMake(19, 15.44), controlPoint1: CGPointMake(17.86, 18.58), controlPoint2: CGPointMake(19, 17.16))
        microphoneFPath.addLineToPoint(CGPointMake(19, 7.52))
        microphoneFPath.addCurveToPoint(CGPointMake(16.35, 4.06), controlPoint1: CGPointMake(19, 5.8), controlPoint2: CGPointMake(17.86, 4.38))
        microphoneFPath.addCurveToPoint(CGPointMake(16.55, 4.44), controlPoint1: CGPointMake(16.47, 4.14), controlPoint2: CGPointMake(16.55, 4.28))
        microphoneFPath.addLineToPoint(CGPointMake(16.55, 5.76))
        microphoneFPath.addCurveToPoint(CGPointMake(16.14, 6.2), controlPoint1: CGPointMake(16.55, 6), controlPoint2: CGPointMake(16.36, 6.2))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 5.76), controlPoint1: CGPointMake(15.91, 6.2), controlPoint2: CGPointMake(15.73, 6))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 4.44))
        microphoneFPath.addCurveToPoint(CGPointMake(16.03, 4.01), controlPoint1: CGPointMake(15.73, 4.24), controlPoint2: CGPointMake(15.86, 4.07))
        microphoneFPath.addLineToPoint(CGPointMake(16.03, 4.01))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 4), controlPoint1: CGPointMake(15.93, 4.01), controlPoint2: CGPointMake(15.83, 4))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 4))
        microphoneFPath.addCurveToPoint(CGPointMake(12.97, 4.01), controlPoint1: CGPointMake(13.17, 4), controlPoint2: CGPointMake(13.07, 4.01))
        microphoneFPath.addLineToPoint(CGPointMake(12.97, 4.01))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 4.44), controlPoint1: CGPointMake(13.15, 4.07), controlPoint2: CGPointMake(13.27, 4.24))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 5.76))
        microphoneFPath.addCurveToPoint(CGPointMake(12.86, 6.2), controlPoint1: CGPointMake(13.27, 6), controlPoint2: CGPointMake(13.09, 6.2))
        microphoneFPath.addCurveToPoint(CGPointMake(12.45, 5.76), controlPoint1: CGPointMake(12.64, 6.2), controlPoint2: CGPointMake(12.45, 6))
        microphoneFPath.addLineToPoint(CGPointMake(12.45, 4.44))
        microphoneFPath.addCurveToPoint(CGPointMake(12.65, 4.06), controlPoint1: CGPointMake(12.45, 4.28), controlPoint2: CGPointMake(12.53, 4.14))
        microphoneFPath.addCurveToPoint(CGPointMake(10, 7.52), controlPoint1: CGPointMake(11.14, 4.38), controlPoint2: CGPointMake(10, 5.8))
        microphoneFPath.addLineToPoint(CGPointMake(10, 15.44))
        microphoneFPath.addCurveToPoint(CGPointMake(12.65, 18.9), controlPoint1: CGPointMake(10, 17.16), controlPoint2: CGPointMake(11.14, 18.58))
        microphoneFPath.addLineToPoint(CGPointMake(12.65, 18.9))
        microphoneFPath.addCurveToPoint(CGPointMake(12.45, 18.52), controlPoint1: CGPointMake(12.53, 18.82), controlPoint2: CGPointMake(12.45, 18.68))
        microphoneFPath.addLineToPoint(CGPointMake(12.45, 17.2))
        microphoneFPath.addCurveToPoint(CGPointMake(12.86, 16.76), controlPoint1: CGPointMake(12.45, 16.96), controlPoint2: CGPointMake(12.64, 16.76))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 17.2), controlPoint1: CGPointMake(13.09, 16.76), controlPoint2: CGPointMake(13.27, 16.96))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 18.52))
        microphoneFPath.addCurveToPoint(CGPointMake(12.97, 18.95), controlPoint1: CGPointMake(13.27, 18.72), controlPoint2: CGPointMake(13.14, 18.89))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 18.96), controlPoint1: CGPointMake(13.07, 18.95), controlPoint2: CGPointMake(13.17, 18.96))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 18.96))
        microphoneFPath.addCurveToPoint(CGPointMake(16.03, 18.95), controlPoint1: CGPointMake(15.83, 18.96), controlPoint2: CGPointMake(15.93, 18.95))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 18.52), controlPoint1: CGPointMake(15.85, 18.89), controlPoint2: CGPointMake(15.73, 18.72))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 17.2))
        microphoneFPath.addCurveToPoint(CGPointMake(16.14, 16.76), controlPoint1: CGPointMake(15.73, 16.96), controlPoint2: CGPointMake(15.91, 16.76))
        microphoneFPath.addCurveToPoint(CGPointMake(16.55, 17.2), controlPoint1: CGPointMake(16.36, 16.76), controlPoint2: CGPointMake(16.55, 16.96))
        microphoneFPath.addLineToPoint(CGPointMake(16.55, 18.52))
        microphoneFPath.addCurveToPoint(CGPointMake(16.35, 18.9), controlPoint1: CGPointMake(16.55, 18.68), controlPoint2: CGPointMake(16.47, 18.82))
        microphoneFPath.addLineToPoint(CGPointMake(16.35, 18.9))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(15.73, 7.52))
        microphoneFPath.addCurveToPoint(CGPointMake(15.32, 7.96), controlPoint1: CGPointMake(15.5, 7.52), controlPoint2: CGPointMake(15.32, 7.72))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 8.4), controlPoint1: CGPointMake(15.32, 8.2), controlPoint2: CGPointMake(15.5, 8.4))
        microphoneFPath.addLineToPoint(CGPointMake(19, 8.4))
        microphoneFPath.addLineToPoint(CGPointMake(19, 7.52))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 7.52))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(15.73, 9.28))
        microphoneFPath.addCurveToPoint(CGPointMake(15.32, 9.72), controlPoint1: CGPointMake(15.5, 9.28), controlPoint2: CGPointMake(15.32, 9.48))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 10.16), controlPoint1: CGPointMake(15.32, 9.96), controlPoint2: CGPointMake(15.5, 10.16))
        microphoneFPath.addLineToPoint(CGPointMake(19, 10.16))
        microphoneFPath.addLineToPoint(CGPointMake(19, 9.28))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 9.28))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(15.73, 11.04))
        microphoneFPath.addCurveToPoint(CGPointMake(15.32, 11.48), controlPoint1: CGPointMake(15.5, 11.04), controlPoint2: CGPointMake(15.32, 11.24))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 11.92), controlPoint1: CGPointMake(15.32, 11.72), controlPoint2: CGPointMake(15.5, 11.92))
        microphoneFPath.addLineToPoint(CGPointMake(19, 11.92))
        microphoneFPath.addLineToPoint(CGPointMake(19, 11.04))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 11.04))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(15.73, 12.8))
        microphoneFPath.addCurveToPoint(CGPointMake(15.32, 13.24), controlPoint1: CGPointMake(15.5, 12.8), controlPoint2: CGPointMake(15.32, 13))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 13.68), controlPoint1: CGPointMake(15.32, 13.48), controlPoint2: CGPointMake(15.5, 13.68))
        microphoneFPath.addLineToPoint(CGPointMake(19, 13.68))
        microphoneFPath.addLineToPoint(CGPointMake(19, 12.8))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 12.8))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(15.73, 14.56))
        microphoneFPath.addCurveToPoint(CGPointMake(15.32, 15), controlPoint1: CGPointMake(15.5, 14.56), controlPoint2: CGPointMake(15.32, 14.76))
        microphoneFPath.addCurveToPoint(CGPointMake(15.73, 15.44), controlPoint1: CGPointMake(15.32, 15.24), controlPoint2: CGPointMake(15.5, 15.44))
        microphoneFPath.addLineToPoint(CGPointMake(19, 15.44))
        microphoneFPath.addLineToPoint(CGPointMake(19, 14.56))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 14.56))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(10, 7.52))
        microphoneFPath.addLineToPoint(CGPointMake(10, 8.4))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 8.4))
        microphoneFPath.addCurveToPoint(CGPointMake(13.68, 7.96), controlPoint1: CGPointMake(13.5, 8.4), controlPoint2: CGPointMake(13.68, 8.2))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 7.52), controlPoint1: CGPointMake(13.68, 7.72), controlPoint2: CGPointMake(13.5, 7.52))
        microphoneFPath.addLineToPoint(CGPointMake(10, 7.52))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(10, 9.28))
        microphoneFPath.addLineToPoint(CGPointMake(10, 10.16))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 10.16))
        microphoneFPath.addCurveToPoint(CGPointMake(13.68, 9.72), controlPoint1: CGPointMake(13.5, 10.16), controlPoint2: CGPointMake(13.68, 9.96))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 9.28), controlPoint1: CGPointMake(13.68, 9.48), controlPoint2: CGPointMake(13.5, 9.28))
        microphoneFPath.addLineToPoint(CGPointMake(10, 9.28))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(10, 11.04))
        microphoneFPath.addLineToPoint(CGPointMake(10, 11.92))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 11.92))
        microphoneFPath.addCurveToPoint(CGPointMake(13.68, 11.48), controlPoint1: CGPointMake(13.5, 11.92), controlPoint2: CGPointMake(13.68, 11.72))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 11.04), controlPoint1: CGPointMake(13.68, 11.24), controlPoint2: CGPointMake(13.5, 11.04))
        microphoneFPath.addLineToPoint(CGPointMake(10, 11.04))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(10, 12.8))
        microphoneFPath.addLineToPoint(CGPointMake(10, 13.68))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 13.68))
        microphoneFPath.addCurveToPoint(CGPointMake(13.68, 13.24), controlPoint1: CGPointMake(13.5, 13.68), controlPoint2: CGPointMake(13.68, 13.48))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 12.8), controlPoint1: CGPointMake(13.68, 13), controlPoint2: CGPointMake(13.5, 12.8))
        microphoneFPath.addLineToPoint(CGPointMake(10, 12.8))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(10, 14.56))
        microphoneFPath.addLineToPoint(CGPointMake(10, 15.44))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 15.44))
        microphoneFPath.addCurveToPoint(CGPointMake(13.68, 15), controlPoint1: CGPointMake(13.5, 15.44), controlPoint2: CGPointMake(13.68, 15.24))
        microphoneFPath.addCurveToPoint(CGPointMake(13.27, 14.56), controlPoint1: CGPointMake(13.68, 14.76), controlPoint2: CGPointMake(13.5, 14.56))
        microphoneFPath.addLineToPoint(CGPointMake(10, 14.56))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(14.5, 4))
        microphoneFPath.addCurveToPoint(CGPointMake(14.09, 4.44), controlPoint1: CGPointMake(14.27, 4), controlPoint2: CGPointMake(14.09, 4.2))
        microphoneFPath.addLineToPoint(CGPointMake(14.09, 5.76))
        microphoneFPath.addCurveToPoint(CGPointMake(14.5, 6.2), controlPoint1: CGPointMake(14.09, 6), controlPoint2: CGPointMake(14.27, 6.2))
        microphoneFPath.addCurveToPoint(CGPointMake(14.91, 5.76), controlPoint1: CGPointMake(14.73, 6.2), controlPoint2: CGPointMake(14.91, 6))
        microphoneFPath.addLineToPoint(CGPointMake(14.91, 4.44))
        microphoneFPath.addCurveToPoint(CGPointMake(14.5, 4), controlPoint1: CGPointMake(14.91, 4.2), controlPoint2: CGPointMake(14.73, 4))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(14.5, 16.76))
        microphoneFPath.addCurveToPoint(CGPointMake(14.09, 17.2), controlPoint1: CGPointMake(14.27, 16.76), controlPoint2: CGPointMake(14.09, 16.96))
        microphoneFPath.addLineToPoint(CGPointMake(14.09, 18.52))
        microphoneFPath.addCurveToPoint(CGPointMake(14.5, 18.96), controlPoint1: CGPointMake(14.09, 18.76), controlPoint2: CGPointMake(14.27, 18.96))
        microphoneFPath.addCurveToPoint(CGPointMake(14.91, 18.52), controlPoint1: CGPointMake(14.73, 18.96), controlPoint2: CGPointMake(14.91, 18.76))
        microphoneFPath.addLineToPoint(CGPointMake(14.91, 17.2))
        microphoneFPath.addCurveToPoint(CGPointMake(14.5, 16.76), controlPoint1: CGPointMake(14.91, 16.96), controlPoint2: CGPointMake(14.73, 16.76))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(13.27, 22.04))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 26))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 26))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 22.04))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 22.04))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(13.27, 18.96))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 20.28))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 20.28))
        microphoneFPath.addLineToPoint(CGPointMake(15.73, 18.96))
        microphoneFPath.addLineToPoint(CGPointMake(13.27, 18.96))
        microphoneFPath.closePath()
        microphoneFPath.moveToPoint(CGPointMake(14.09, 20.28))
        microphoneFPath.addLineToPoint(CGPointMake(14.09, 22.04))
        microphoneFPath.addLineToPoint(CGPointMake(14.91, 22.04))
        microphoneFPath.addLineToPoint(CGPointMake(14.91, 20.28))
        microphoneFPath.addLineToPoint(CGPointMake(14.09, 20.28))
        microphoneFPath.closePath()
        microphoneFPath.miterLimit = 4;

        microphoneFPath.usesEvenOddFillRule = true;

        ObenStyle.obenBlue.setFill()
        microphoneFPath.fill()
    }

    public class func drawMorph() {
        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.900)

        //// comment-F Drawing
        let commentFPath = UIBezierPath()
        commentFPath.moveToPoint(CGPointMake(7.67, 6.23))
        commentFPath.addCurveToPoint(CGPointMake(4, 9.87), controlPoint1: CGPointMake(5.64, 6.23), controlPoint2: CGPointMake(4, 7.86))
        commentFPath.addLineToPoint(CGPointMake(4, 16.26))
        commentFPath.addCurveToPoint(CGPointMake(7.67, 19.91), controlPoint1: CGPointMake(4, 18.28), controlPoint2: CGPointMake(5.64, 19.91))
        commentFPath.addLineToPoint(CGPointMake(15.96, 19.91))
        commentFPath.addLineToPoint(CGPointMake(23.35, 23))
        commentFPath.addLineToPoint(CGPointMake(20.43, 19.91))
        commentFPath.addLineToPoint(CGPointMake(22.83, 19.91))
        commentFPath.addCurveToPoint(CGPointMake(26, 16.26), controlPoint1: CGPointMake(24.58, 19.91), controlPoint2: CGPointMake(26, 18.27))
        commentFPath.addLineToPoint(CGPointMake(26, 9.87))
        commentFPath.addCurveToPoint(CGPointMake(22.33, 6.23), controlPoint1: CGPointMake(26, 7.86), controlPoint2: CGPointMake(24.36, 6.23))
        commentFPath.addLineToPoint(CGPointMake(7.67, 6.23))
        commentFPath.closePath()
        commentFPath.moveToPoint(CGPointMake(19.81, 13.98))
        commentFPath.addCurveToPoint(CGPointMake(20.96, 12.84), controlPoint1: CGPointMake(20.45, 13.98), controlPoint2: CGPointMake(20.96, 13.47))
        commentFPath.addCurveToPoint(CGPointMake(19.81, 11.7), controlPoint1: CGPointMake(20.96, 12.21), controlPoint2: CGPointMake(20.45, 11.7))
        commentFPath.addCurveToPoint(CGPointMake(18.67, 12.84), controlPoint1: CGPointMake(19.18, 11.7), controlPoint2: CGPointMake(18.67, 12.21))
        commentFPath.addCurveToPoint(CGPointMake(19.81, 13.98), controlPoint1: CGPointMake(18.67, 13.47), controlPoint2: CGPointMake(19.18, 13.98))
        commentFPath.closePath()
        commentFPath.moveToPoint(CGPointMake(15.23, 13.98))
        commentFPath.addCurveToPoint(CGPointMake(16.38, 12.84), controlPoint1: CGPointMake(15.86, 13.98), controlPoint2: CGPointMake(16.38, 13.47))
        commentFPath.addCurveToPoint(CGPointMake(15.23, 11.7), controlPoint1: CGPointMake(16.38, 12.21), controlPoint2: CGPointMake(15.86, 11.7))
        commentFPath.addCurveToPoint(CGPointMake(14.08, 12.84), controlPoint1: CGPointMake(14.6, 11.7), controlPoint2: CGPointMake(14.08, 12.21))
        commentFPath.addCurveToPoint(CGPointMake(15.23, 13.98), controlPoint1: CGPointMake(14.08, 13.47), controlPoint2: CGPointMake(14.6, 13.98))
        commentFPath.closePath()
        commentFPath.moveToPoint(CGPointMake(10.65, 13.98))
        commentFPath.addCurveToPoint(CGPointMake(11.79, 12.84), controlPoint1: CGPointMake(11.28, 13.98), controlPoint2: CGPointMake(11.79, 13.47))
        commentFPath.addCurveToPoint(CGPointMake(10.65, 11.7), controlPoint1: CGPointMake(11.79, 12.21), controlPoint2: CGPointMake(11.28, 11.7))
        commentFPath.addCurveToPoint(CGPointMake(9.5, 12.84), controlPoint1: CGPointMake(10.01, 11.7), controlPoint2: CGPointMake(9.5, 12.21))
        commentFPath.addCurveToPoint(CGPointMake(10.65, 13.98), controlPoint1: CGPointMake(9.5, 13.47), controlPoint2: CGPointMake(10.01, 13.98))
        commentFPath.closePath()
        commentFPath.miterLimit = 4;

        commentFPath.usesEvenOddFillRule = true;

        color2.setFill()
        commentFPath.fill()
    }

    public class func drawStar() {

        //// Star-F Drawing
        let starFPath = UIBezierPath()
        starFPath.moveToPoint(CGPointMake(25.22, 37.34))
        starFPath.addLineToPoint(CGPointMake(12.38, 44))
        starFPath.addLineToPoint(CGPointMake(14.84, 29.89))
        starFPath.addLineToPoint(CGPointMake(4.45, 19.9))
        starFPath.addLineToPoint(CGPointMake(18.8, 17.84))
        starFPath.addLineToPoint(CGPointMake(25.22, 5))
        starFPath.addLineToPoint(CGPointMake(31.64, 17.84))
        starFPath.addLineToPoint(CGPointMake(46, 19.9))
        starFPath.addLineToPoint(CGPointMake(35.61, 29.89))
        starFPath.addLineToPoint(CGPointMake(38.06, 44))
        starFPath.addLineToPoint(CGPointMake(25.22, 37.34))
        starFPath.closePath()
        starFPath.miterLimit = 4;

        starFPath.usesEvenOddFillRule = true;

        ObenStyle.goldColor.setFill()
        starFPath.fill()
    }

    public class func drawDefaultProfile() {
        //// Color Declarations
        let lightGreyColor = UIColor(red: 0.967, green: 0.967, blue: 0.967, alpha: 0.900)

        //// user-F Drawing
        let userFPath = UIBezierPath()
        userFPath.moveToPoint(CGPointMake(34.1, 31.7))
        userFPath.addCurveToPoint(CGPointMake(25.28, 28.66), controlPoint1: CGPointMake(32.27, 30.94), controlPoint2: CGPointMake(27.95, 29.44))
        userFPath.addCurveToPoint(CGPointMake(25.02, 27.63), controlPoint1: CGPointMake(25.05, 28.58), controlPoint2: CGPointMake(25.02, 28.58))
        userFPath.addCurveToPoint(CGPointMake(25.65, 25.38), controlPoint1: CGPointMake(25.02, 26.84), controlPoint2: CGPointMake(25.34, 26.05))
        userFPath.addCurveToPoint(CGPointMake(26.54, 22.35), controlPoint1: CGPointMake(26, 24.66), controlPoint2: CGPointMake(26.4, 23.44))
        userFPath.addCurveToPoint(CGPointMake(27.86, 19.18), controlPoint1: CGPointMake(26.95, 21.87), controlPoint2: CGPointMake(27.5, 20.95))
        userFPath.addCurveToPoint(CGPointMake(27.81, 16.52), controlPoint1: CGPointMake(28.17, 17.62), controlPoint2: CGPointMake(28.02, 17.06))
        userFPath.addCurveToPoint(CGPointMake(27.75, 16.36), controlPoint1: CGPointMake(27.79, 16.47), controlPoint2: CGPointMake(27.77, 16.41))
        userFPath.addCurveToPoint(CGPointMake(28.05, 12.62), controlPoint1: CGPointMake(27.68, 15.99), controlPoint2: CGPointMake(27.78, 14.09))
        userFPath.addCurveToPoint(CGPointMake(26.61, 7.68), controlPoint1: CGPointMake(28.24, 11.61), controlPoint2: CGPointMake(28, 9.46))
        userFPath.addCurveToPoint(CGPointMake(20.98, 4.98), controlPoint1: CGPointMake(25.73, 6.56), controlPoint2: CGPointMake(24.05, 5.18))
        userFPath.addLineToPoint(CGPointMake(19.29, 4.98))
        userFPath.addCurveToPoint(CGPointMake(13.71, 7.68), controlPoint1: CGPointMake(16.28, 5.18), controlPoint2: CGPointMake(14.59, 6.56))
        userFPath.addCurveToPoint(CGPointMake(12.28, 12.62), controlPoint1: CGPointMake(12.32, 9.46), controlPoint2: CGPointMake(12.09, 11.61))
        userFPath.addCurveToPoint(CGPointMake(12.57, 16.35), controlPoint1: CGPointMake(12.54, 14.09), controlPoint2: CGPointMake(12.65, 15.99))
        userFPath.addCurveToPoint(CGPointMake(12.51, 16.52), controlPoint1: CGPointMake(12.56, 16.41), controlPoint2: CGPointMake(12.53, 16.47))
        userFPath.addCurveToPoint(CGPointMake(12.47, 19.18), controlPoint1: CGPointMake(12.31, 17.06), controlPoint2: CGPointMake(12.16, 17.62))
        userFPath.addCurveToPoint(CGPointMake(13.78, 22.35), controlPoint1: CGPointMake(12.83, 20.95), controlPoint2: CGPointMake(13.38, 21.87))
        userFPath.addCurveToPoint(CGPointMake(14.67, 25.38), controlPoint1: CGPointMake(13.93, 23.44), controlPoint2: CGPointMake(14.33, 24.66))
        userFPath.addCurveToPoint(CGPointMake(15.04, 27.66), controlPoint1: CGPointMake(14.92, 25.92), controlPoint2: CGPointMake(15.04, 26.63))
        userFPath.addCurveToPoint(CGPointMake(14.79, 28.68), controlPoint1: CGPointMake(15.04, 28.61), controlPoint2: CGPointMake(15, 28.62))
        userFPath.addCurveToPoint(CGPointMake(5.99, 31.81), controlPoint1: CGPointMake(12.03, 29.5), controlPoint2: CGPointMake(7.63, 31.09))
        userFPath.addCurveToPoint(CGPointMake(1.67, 20), controlPoint1: CGPointMake(3.3, 28.62), controlPoint2: CGPointMake(1.67, 24.49))
        userFPath.addCurveToPoint(CGPointMake(20, 1.67), controlPoint1: CGPointMake(1.67, 9.88), controlPoint2: CGPointMake(9.89, 1.67))
        userFPath.addCurveToPoint(CGPointMake(38.33, 20), controlPoint1: CGPointMake(30.11, 1.67), controlPoint2: CGPointMake(38.33, 9.88))
        userFPath.addCurveToPoint(CGPointMake(34.1, 31.7), controlPoint1: CGPointMake(38.33, 24.44), controlPoint2: CGPointMake(36.74, 28.52))
        userFPath.addCurveToPoint(CGPointMake(34.1, 31.7), controlPoint1: CGPointMake(34.1, 31.7), controlPoint2: CGPointMake(36.74, 28.52))
        userFPath.addLineToPoint(CGPointMake(34.1, 31.7))
        userFPath.addLineToPoint(CGPointMake(34.1, 31.7))
        userFPath.closePath()
        userFPath.moveToPoint(CGPointMake(20, 0))
        userFPath.addCurveToPoint(CGPointMake(0, 20), controlPoint1: CGPointMake(8.95, 0), controlPoint2: CGPointMake(0, 8.95))
        userFPath.addCurveToPoint(CGPointMake(20, 40), controlPoint1: CGPointMake(0, 31.04), controlPoint2: CGPointMake(8.95, 40))
        userFPath.addCurveToPoint(CGPointMake(40, 20), controlPoint1: CGPointMake(31.05, 40), controlPoint2: CGPointMake(40, 31.04))
        userFPath.addCurveToPoint(CGPointMake(20, 0), controlPoint1: CGPointMake(40, 8.95), controlPoint2: CGPointMake(31.05, 0))
        userFPath.addLineToPoint(CGPointMake(20, 0))
        userFPath.closePath()
        userFPath.miterLimit = 4;

        userFPath.usesEvenOddFillRule = true;

        lightGreyColor.setFill()
        userFPath.fill()
    }

    public class func drawMorphRating(rating rating: CGFloat = 2) {
        //// Color Declarations
        let fillColor = ObenStyle.obenBlue.colorWithAlpha(0.8)
        let lightGreyColor = UIColor(red: 0.967, green: 0.967, blue: 0.967, alpha: 0.900)

        //// Variable Declarations
        let rating1Show = rating >= 1 ? fillColor : lightGreyColor
        let rating2Show = rating >= 2 ? fillColor : lightGreyColor
        let rating3Show = rating >= 3 ? fillColor : lightGreyColor
        let rating1Border = rating >= 1 ? lightGreyColor : fillColor
        let rating2Border = rating >= 2 ? lightGreyColor : fillColor
        let rating3Border = rating >= 3 ? lightGreyColor : fillColor

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(17.5, 1.5, 10, 10))
        rating2Show.setFill()
        ovalPath.fill()
        rating2Border.setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(1.5, 1.5, 10, 10))
        rating1Show.setFill()
        oval2Path.fill()
        rating1Border.setStroke()
        oval2Path.lineWidth = 0.5
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(33.5, 1.5, 10, 10))
        rating3Show.setFill()
        oval3Path.fill()
        rating3Border.setStroke()
        oval3Path.lineWidth = 0.5
        oval3Path.stroke()
    }

    public class func drawGoldCup() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(19.15, 2.94))
        bezierPath.addLineToPoint(CGPointMake(19.15, -0.14))
        bezierPath.addLineToPoint(CGPointMake(4.36, -0.14))
        bezierPath.addLineToPoint(CGPointMake(4.36, 2.94))
        bezierPath.addLineToPoint(CGPointMake(0.37, 2.94))
        bezierPath.addLineToPoint(CGPointMake(0.37, 10.09))
        bezierPath.addCurveToPoint(CGPointMake(5.95, 16.19), controlPoint1: CGPointMake(0.37, 13.28), controlPoint2: CGPointMake(2.83, 15.91))
        bezierPath.addCurveToPoint(CGPointMake(10.4, 18.69), controlPoint1: CGPointMake(6.98, 17.41), controlPoint2: CGPointMake(8.79, 18.31))
        bezierPath.addLineToPoint(CGPointMake(10.4, 20.85))
        bezierPath.addCurveToPoint(CGPointMake(6.82, 23.69), controlPoint1: CGPointMake(8.86, 21.37), controlPoint2: CGPointMake(6.98, 22.33))
        bezierPath.addLineToPoint(CGPointMake(10, 23.69))
        bezierPath.addLineToPoint(CGPointMake(13.47, 23.69))
        bezierPath.addLineToPoint(CGPointMake(16.65, 23.69))
        bezierPath.addCurveToPoint(CGPointMake(13.15, 20.85), controlPoint1: CGPointMake(16.49, 22.33), controlPoint2: CGPointMake(14.69, 21.38))
        bezierPath.addLineToPoint(CGPointMake(13.15, 18.69))
        bezierPath.addCurveToPoint(CGPointMake(17.52, 16.19), controlPoint1: CGPointMake(14.76, 18.31), controlPoint2: CGPointMake(16.49, 17.41))
        bezierPath.addCurveToPoint(CGPointMake(23.1, 10.09), controlPoint1: CGPointMake(20.64, 15.91), controlPoint2: CGPointMake(23.1, 13.28))
        bezierPath.addLineToPoint(CGPointMake(23.1, 2.94))
        bezierPath.addLineToPoint(CGPointMake(19.15, 2.94))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(2.11, 10.37))
        bezierPath.addLineToPoint(CGPointMake(2.11, 4.77))
        bezierPath.addLineToPoint(CGPointMake(4.25, 4.77))
        bezierPath.addLineToPoint(CGPointMake(4.25, 11.55))
        bezierPath.addCurveToPoint(CGPointMake(4.86, 14.45), controlPoint1: CGPointMake(4.25, 12.58), controlPoint2: CGPointMake(4.48, 13.56))
        bezierPath.addCurveToPoint(CGPointMake(2.11, 10.37), controlPoint1: CGPointMake(3.26, 13.83), controlPoint2: CGPointMake(2.11, 12.23))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(14.5, 12.07))
        bezierPath.addLineToPoint(CGPointMake(11.73, 10.62))
        bezierPath.addLineToPoint(CGPointMake(8.98, 12.07))
        bezierPath.addLineToPoint(CGPointMake(9.5, 9))
        bezierPath.addLineToPoint(CGPointMake(7.27, 6.82))
        bezierPath.addLineToPoint(CGPointMake(10.36, 6.38))
        bezierPath.addLineToPoint(CGPointMake(11.74, 3.58))
        bezierPath.addLineToPoint(CGPointMake(13.12, 6.38))
        bezierPath.addLineToPoint(CGPointMake(16.2, 6.82))
        bezierPath.addLineToPoint(CGPointMake(13.97, 9))
        bezierPath.addLineToPoint(CGPointMake(14.5, 12.07))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(21.36, 10.35))
        bezierPath.addCurveToPoint(CGPointMake(18.61, 14.45), controlPoint1: CGPointMake(21.36, 12.22), controlPoint2: CGPointMake(20.21, 13.83))
        bezierPath.addCurveToPoint(CGPointMake(19.21, 11.54), controlPoint1: CGPointMake(18.99, 13.56), controlPoint2: CGPointMake(19.21, 12.58))
        bezierPath.addLineToPoint(CGPointMake(19.21, 4.73))
        bezierPath.addLineToPoint(CGPointMake(21.36, 4.73))
        bezierPath.addLineToPoint(CGPointMake(21.36, 10.35))
        bezierPath.closePath()
        ObenStyle.goldColor.setFill()
        bezierPath.fill()
    }

    public class func drawBubbles() {
        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.900)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(21.42, 12.07))
        bezierPath.addCurveToPoint(CGPointMake(11.97, 5), controlPoint1: CGPointMake(21.42, 8.17), controlPoint2: CGPointMake(17.19, 5))
        bezierPath.addCurveToPoint(CGPointMake(2.52, 12.07), controlPoint1: CGPointMake(6.75, 5), controlPoint2: CGPointMake(2.52, 8.17))
        bezierPath.addCurveToPoint(CGPointMake(10.63, 19.06), controlPoint1: CGPointMake(2.52, 15.63), controlPoint2: CGPointMake(6.05, 18.58))
        bezierPath.addLineToPoint(CGPointMake(8.69, 22.94))
        bezierPath.addLineToPoint(CGPointMake(15.46, 18.64))
        bezierPath.addCurveToPoint(CGPointMake(21.42, 12.07), controlPoint1: CGPointMake(18.95, 17.6), controlPoint2: CGPointMake(21.42, 15.05))
        bezierPath.closePath()
        color2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(26.5, 17.37))
        bezier2Path.addCurveToPoint(CGPointMake(23.07, 13), controlPoint1: CGPointMake(26.5, 15.66), controlPoint2: CGPointMake(24.91, 13.88))
        bezier2Path.addCurveToPoint(CGPointMake(16.45, 19.77), controlPoint1: CGPointMake(22.55, 15.97), controlPoint2: CGPointMake(20.18, 18.7))
        bezier2Path.addLineToPoint(CGPointMake(14.67, 20.75))
        bezier2Path.addCurveToPoint(CGPointMake(17.12, 21.95), controlPoint1: CGPointMake(15.35, 21.27), controlPoint2: CGPointMake(16.18, 21.68))
        bezier2Path.addLineToPoint(CGPointMake(22.57, 24.95))
        bezier2Path.addLineToPoint(CGPointMake(20.62, 22.25))
        bezier2Path.addCurveToPoint(CGPointMake(26.5, 17.37), controlPoint1: CGPointMake(23.94, 21.9), controlPoint2: CGPointMake(26.5, 19.85))
        bezier2Path.closePath()
        color2.setFill()
        bezier2Path.fill()
    }

    public class func drawRecordButton(amount amount: CGFloat = 0.436) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Variable Declarations
        let recFillByAmount = UIColor(red: 0.451, green: 0.706, blue: 1, alpha: amount)
        let recStrokeByAmount: CGFloat = amount * 20 + 1
        let recMicScaleByAmount: CGFloat = 1 + amount / 4.0

        //// bgCircle Drawing
        let bgCirclePath = UIBezierPath(ovalInRect: CGRectMake(11, 11, 90, 90))
        UIColor.whiteColor().setFill()
        bgCirclePath.fill()


        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 56, 56)

        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(-45, -45, 90, 90))
        recFillByAmount.setFill()
        ovalPath.fill()
        ObenStyle.obenBlue.setStroke()
        ovalPath.lineWidth = recStrokeByAmount
        ovalPath.stroke()

        CGContextRestoreGState(context)


        //// Symbol Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 56, 56)
        CGContextScaleCTM(context, recMicScaleByAmount, recMicScaleByAmount)

        let symbolRect = CGRectMake(-29, -30, 60, 60)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)
        CGContextScaleCTM(context, symbolRect.size.width / 30, symbolRect.size.height / 30)

        ObenStyle.drawMic()
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    public class func drawTts() {
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.263, green: 0.263, blue: 0.263, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(3.04, 8.5))
        bezierPath.addLineToPoint(CGPointMake(3.04, 21.5))
        bezierPath.addLineToPoint(CGPointMake(27.04, 21.5))
        bezierPath.addLineToPoint(CGPointMake(27.04, 8.5))
        bezierPath.addLineToPoint(CGPointMake(3.04, 8.5))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(20.02, 10.32))
        bezierPath.addLineToPoint(CGPointMake(22.07, 10.32))
        bezierPath.addLineToPoint(CGPointMake(22.07, 12.52))
        bezierPath.addLineToPoint(CGPointMake(20.02, 12.52))
        bezierPath.addLineToPoint(CGPointMake(20.02, 10.32))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(21.06, 14.43))
        bezierPath.addLineToPoint(CGPointMake(21.06, 16.54))
        bezierPath.addLineToPoint(CGPointMake(19.03, 16.54))
        bezierPath.addLineToPoint(CGPointMake(19.03, 14.43))
        bezierPath.addLineToPoint(CGPointMake(21.06, 14.43))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(16.97, 10.32))
        bezierPath.addLineToPoint(CGPointMake(19.06, 10.32))
        bezierPath.addLineToPoint(CGPointMake(19.06, 12.52))
        bezierPath.addLineToPoint(CGPointMake(16.97, 12.52))
        bezierPath.addLineToPoint(CGPointMake(16.97, 10.32))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(18.14, 14.43))
        bezierPath.addLineToPoint(CGPointMake(18.14, 16.58))
        bezierPath.addLineToPoint(CGPointMake(16.05, 16.58))
        bezierPath.addLineToPoint(CGPointMake(16.05, 14.43))
        bezierPath.addLineToPoint(CGPointMake(18.14, 14.43))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(14.01, 10.32))
        bezierPath.addLineToPoint(CGPointMake(16.05, 10.32))
        bezierPath.addLineToPoint(CGPointMake(16.05, 12.52))
        bezierPath.addLineToPoint(CGPointMake(14.01, 12.52))
        bezierPath.addLineToPoint(CGPointMake(14.01, 10.32))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(14.04, 14.38))
        bezierPath.addLineToPoint(CGPointMake(14.04, 16.54))
        bezierPath.addLineToPoint(CGPointMake(11.99, 16.54))
        bezierPath.addLineToPoint(CGPointMake(11.99, 14.38))
        bezierPath.addLineToPoint(CGPointMake(14.04, 14.38))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(10.94, 10.32))
        bezierPath.addLineToPoint(CGPointMake(13.12, 10.32))
        bezierPath.addLineToPoint(CGPointMake(13.12, 12.52))
        bezierPath.addLineToPoint(CGPointMake(10.94, 12.52))
        bezierPath.addLineToPoint(CGPointMake(10.94, 10.32))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(11.11, 14.43))
        bezierPath.addLineToPoint(CGPointMake(11.11, 16.54))
        bezierPath.addLineToPoint(CGPointMake(8.94, 16.54))
        bezierPath.addLineToPoint(CGPointMake(8.94, 14.43))
        bezierPath.addLineToPoint(CGPointMake(11.11, 14.43))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(7.98, 10.32))
        bezierPath.addLineToPoint(CGPointMake(10.11, 10.32))
        bezierPath.addLineToPoint(CGPointMake(10.11, 12.52))
        bezierPath.addLineToPoint(CGPointMake(7.98, 12.52))
        bezierPath.addLineToPoint(CGPointMake(7.98, 10.32))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(4.96, 10.32))
        bezierPath.addLineToPoint(CGPointMake(7.1, 10.32))
        bezierPath.addLineToPoint(CGPointMake(7.1, 12.52))
        bezierPath.addLineToPoint(CGPointMake(4.96, 12.52))
        bezierPath.addLineToPoint(CGPointMake(4.96, 10.32))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(8.02, 16.59))
        bezierPath.addLineToPoint(CGPointMake(5.93, 16.59))
        bezierPath.addLineToPoint(CGPointMake(5.93, 14.39))
        bezierPath.addLineToPoint(CGPointMake(8.02, 14.39))
        bezierPath.addLineToPoint(CGPointMake(8.02, 16.59))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(22.11, 19.62))
        bezierPath.addLineToPoint(CGPointMake(7.95, 19.62))
        bezierPath.addLineToPoint(CGPointMake(7.95, 17.48))
        bezierPath.addLineToPoint(CGPointMake(22.11, 17.48))
        bezierPath.addLineToPoint(CGPointMake(22.11, 19.62))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(24.12, 16.54))
        bezierPath.addLineToPoint(CGPointMake(22.07, 16.54))
        bezierPath.addLineToPoint(CGPointMake(22.07, 14.39))
        bezierPath.addLineToPoint(CGPointMake(24.12, 14.39))
        bezierPath.addLineToPoint(CGPointMake(24.12, 16.54))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(25.16, 12.52))
        bezierPath.addLineToPoint(CGPointMake(23.03, 12.52))
        bezierPath.addLineToPoint(CGPointMake(23.03, 10.32))
        bezierPath.addLineToPoint(CGPointMake(25.16, 10.32))
        bezierPath.addLineToPoint(CGPointMake(25.16, 12.52))
        bezierPath.closePath()
        fillColor2.setFill()
        bezierPath.fill()
    }

    public class func drawLeftArrow() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.811, green: 0.811, blue: 0.811, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(23, 4.78))
        bezierPath.addLineToPoint(CGPointMake(19.99, 1.79))
        bezierPath.addLineToPoint(CGPointMake(5.79, 15.89))
        bezierPath.addLineToPoint(CGPointMake(19.99, 30))
        bezierPath.addLineToPoint(CGPointMake(23, 27.01))
        bezierPath.addLineToPoint(CGPointMake(11.81, 15.89))
        bezierPath.addLineToPoint(CGPointMake(23, 4.78))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor3.setFill()
        bezierPath.fill()
    }

    public class func drawPlay() {
        //// Color Declarations
        let color = UIColor(red: 0.867, green: 0.867, blue: 0.867, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(17, 17))
        rectanglePath.addLineToPoint(CGPointMake(17, 0))
        rectanglePath.addLineToPoint(CGPointMake(0, 0))
        rectanglePath.addLineToPoint(CGPointMake(17, 17))
        rectanglePath.closePath()
        color.setFill()
        rectanglePath.fill()
    }

    public class func drawGear() {
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.263, green: 0.263, blue: 0.263, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(25.86, 18.85))
        bezierPath.addLineToPoint(CGPointMake(29, 18.85))
        bezierPath.addLineToPoint(CGPointMake(29, 15.16))
        bezierPath.addLineToPoint(CGPointMake(25.87, 15.16))
        bezierPath.addCurveToPoint(CGPointMake(24.58, 12.03), controlPoint1: CGPointMake(25.64, 14.02), controlPoint2: CGPointMake(25.19, 12.97))
        bezierPath.addLineToPoint(CGPointMake(26.79, 9.82))
        bezierPath.addLineToPoint(CGPointMake(24.18, 7.21))
        bezierPath.addLineToPoint(CGPointMake(21.97, 9.42))
        bezierPath.addCurveToPoint(CGPointMake(18.85, 8.12), controlPoint1: CGPointMake(21.03, 8.8), controlPoint2: CGPointMake(19.98, 8.35))
        bezierPath.addLineToPoint(CGPointMake(18.85, 5))
        bezierPath.addLineToPoint(CGPointMake(15.15, 5))
        bezierPath.addLineToPoint(CGPointMake(15.15, 8.13))
        bezierPath.addCurveToPoint(CGPointMake(12.04, 9.43), controlPoint1: CGPointMake(14.03, 8.36), controlPoint2: CGPointMake(12.98, 8.82))
        bezierPath.addLineToPoint(CGPointMake(9.82, 7.21))
        bezierPath.addLineToPoint(CGPointMake(7.21, 9.82))
        bezierPath.addLineToPoint(CGPointMake(9.45, 12.06))
        bezierPath.addCurveToPoint(CGPointMake(8.17, 15.15), controlPoint1: CGPointMake(8.84, 12.99), controlPoint2: CGPointMake(8.4, 14.03))
        bezierPath.addLineToPoint(CGPointMake(5, 15.15))
        bezierPath.addLineToPoint(CGPointMake(5, 18.85))
        bezierPath.addLineToPoint(CGPointMake(8.18, 18.85))
        bezierPath.addCurveToPoint(CGPointMake(9.46, 21.92), controlPoint1: CGPointMake(8.42, 19.96), controlPoint2: CGPointMake(8.86, 21))
        bezierPath.addLineToPoint(CGPointMake(7.21, 24.18))
        bezierPath.addLineToPoint(CGPointMake(9.82, 26.79))
        bezierPath.addLineToPoint(CGPointMake(12.07, 24.54))
        bezierPath.addCurveToPoint(CGPointMake(15.15, 25.83), controlPoint1: CGPointMake(13, 25.15), controlPoint2: CGPointMake(14.04, 25.59))
        bezierPath.addLineToPoint(CGPointMake(15.15, 29))
        bezierPath.addLineToPoint(CGPointMake(18.85, 29))
        bezierPath.addLineToPoint(CGPointMake(18.85, 25.84))
        bezierPath.addCurveToPoint(CGPointMake(21.95, 24.56), controlPoint1: CGPointMake(19.97, 25.61), controlPoint2: CGPointMake(21.02, 25.16))
        bezierPath.addLineToPoint(CGPointMake(24.18, 26.79))
        bezierPath.addLineToPoint(CGPointMake(26.79, 24.18))
        bezierPath.addLineToPoint(CGPointMake(24.56, 21.95))
        bezierPath.addCurveToPoint(CGPointMake(25.86, 18.85), controlPoint1: CGPointMake(25.18, 21.02), controlPoint2: CGPointMake(25.62, 19.97))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(17.02, 22.03))
        bezierPath.addCurveToPoint(CGPointMake(11.98, 16.98), controlPoint1: CGPointMake(14.24, 22.03), controlPoint2: CGPointMake(11.98, 19.77))
        bezierPath.addCurveToPoint(CGPointMake(17.02, 11.93), controlPoint1: CGPointMake(11.98, 14.19), controlPoint2: CGPointMake(14.24, 11.93))
        bezierPath.addCurveToPoint(CGPointMake(22.06, 16.98), controlPoint1: CGPointMake(19.81, 11.93), controlPoint2: CGPointMake(22.06, 14.19))
        bezierPath.addCurveToPoint(CGPointMake(17.02, 22.03), controlPoint1: CGPointMake(22.06, 19.77), controlPoint2: CGPointMake(19.8, 22.03))
        bezierPath.closePath()
        fillColor2.setFill()
        bezierPath.fill()
    }

    //// Generated Images

    public class func imageOfRecording(active active: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            ObenStyle.drawRecording(active: active)

        let imageOfRecording = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRecording
    }

    public class var imageOfMic: UIImage {
        if Cache.imageOfMic != nil {
            return Cache.imageOfMic!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            ObenStyle.drawMic()

        Cache.imageOfMic = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMic!
    }

    public class var imageOfMorph: UIImage {
        if Cache.imageOfMorph != nil {
            return Cache.imageOfMorph!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            ObenStyle.drawMorph()

        Cache.imageOfMorph = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMorph!
    }

    public class var imageOfStar: UIImage {
        if Cache.imageOfStar != nil {
            return Cache.imageOfStar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            ObenStyle.drawStar()

        Cache.imageOfStar = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStar!
    }

    public class var imageOfDefaultProfile: UIImage {
        if Cache.imageOfDefaultProfile != nil {
            return Cache.imageOfDefaultProfile!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), false, 0)
            ObenStyle.drawDefaultProfile()

        Cache.imageOfDefaultProfile = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfDefaultProfile!
    }

    public class func imageOfMorphRating(rating rating: CGFloat = 2) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(45, 13), false, 0)
            ObenStyle.drawMorphRating(rating: rating)

        let imageOfMorphRating = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMorphRating
    }

    public class var imageOfGoldCup: UIImage {
        if Cache.imageOfGoldCup != nil {
            return Cache.imageOfGoldCup!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(23, 24), false, 0)
            ObenStyle.drawGoldCup()

        Cache.imageOfGoldCup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfGoldCup!
    }

    public class var imageOfBubbles: UIImage {
        if Cache.imageOfBubbles != nil {
            return Cache.imageOfBubbles!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            ObenStyle.drawBubbles()

        Cache.imageOfBubbles = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfBubbles!
    }

    public class func imageOfRecordButton(amount amount: CGFloat = 0.436) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(113, 113), false, 0)
            ObenStyle.drawRecordButton(amount: amount)

        let imageOfRecordButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRecordButton
    }

    public class var imageOfTts: UIImage {
        if Cache.imageOfTts != nil {
            return Cache.imageOfTts!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            ObenStyle.drawTts()

        Cache.imageOfTts = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTts!
    }

    public class var imageOfLeftArrow: UIImage {
        if Cache.imageOfLeftArrow != nil {
            return Cache.imageOfLeftArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(33, 33), false, 0)
            ObenStyle.drawLeftArrow()

        Cache.imageOfLeftArrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfLeftArrow!
    }

    public class var imageOfPlay: UIImage {
        if Cache.imageOfPlay != nil {
            return Cache.imageOfPlay!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(17, 17), false, 0)
            ObenStyle.drawPlay()

        Cache.imageOfPlay = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPlay!
    }

    public class var imageOfGear: UIImage {
        if Cache.imageOfGear != nil {
            return Cache.imageOfGear!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(33, 33), false, 0)
            ObenStyle.drawGear()

        Cache.imageOfGear = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfGear!
    }

    //// Customization Infrastructure

    @IBOutlet var micTargets: [AnyObject]! {
        get { return Cache.micTargets }
        set {
            Cache.micTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfMic)
            }
        }
    }

    @IBOutlet var morphTargets: [AnyObject]! {
        get { return Cache.morphTargets }
        set {
            Cache.morphTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfMorph)
            }
        }
    }

    @IBOutlet var starTargets: [AnyObject]! {
        get { return Cache.starTargets }
        set {
            Cache.starTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfStar)
            }
        }
    }

    @IBOutlet var defaultProfileTargets: [AnyObject]! {
        get { return Cache.defaultProfileTargets }
        set {
            Cache.defaultProfileTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfDefaultProfile)
            }
        }
    }

    @IBOutlet var goldCupTargets: [AnyObject]! {
        get { return Cache.goldCupTargets }
        set {
            Cache.goldCupTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfGoldCup)
            }
        }
    }

    @IBOutlet var bubblesTargets: [AnyObject]! {
        get { return Cache.bubblesTargets }
        set {
            Cache.bubblesTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfBubbles)
            }
        }
    }

    @IBOutlet var ttsTargets: [AnyObject]! {
        get { return Cache.ttsTargets }
        set {
            Cache.ttsTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfTts)
            }
        }
    }

    @IBOutlet var leftArrowTargets: [AnyObject]! {
        get { return Cache.leftArrowTargets }
        set {
            Cache.leftArrowTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfLeftArrow)
            }
        }
    }

    @IBOutlet var playTargets: [AnyObject]! {
        get { return Cache.playTargets }
        set {
            Cache.playTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfPlay)
            }
        }
    }

    @IBOutlet var gearTargets: [AnyObject]! {
        get { return Cache.gearTargets }
        set {
            Cache.gearTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: ObenStyle.imageOfGear)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
